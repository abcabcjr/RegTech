basePath: /
definitions:
  handler.SetStatusRequest:
    properties:
      asset_id:
        description: Asset ID (empty for global items)
        example: asset-123
        type: string
      item_id:
        description: Checklist item template ID
        example: security-policy-001
        type: string
      notes:
        description: Optional notes
        example: Verified during security audit
        type: string
      status:
        description: 'Status: yes, no, or na'
        enum:
        - "yes"
        - "no"
        - na
        example: "yes"
        type: string
    type: object
  handler.UploadTemplatesRequest:
    properties:
      templates:
        description: Array of checklist templates to upload
        items:
          $ref: '#/definitions/model.ChecklistItemTemplate'
        type: array
    type: object
  model.ChecklistItemTemplate:
    properties:
      asset_types:
        description: Applicable asset types if scope is "asset"
        items:
          type: string
        type: array
      category:
        type: string
      description:
        type: string
      evidence_rules:
        description: Rules for auto-derivation
        items:
          $ref: '#/definitions/model.EvidenceRule'
        type: array
      id:
        type: string
      recommendation:
        type: string
      required:
        type: boolean
      scope:
        description: '"global" or "asset"'
        type: string
      script_controlled:
        description: Can be controlled by Lua scripts
        type: boolean
      title:
        type: string
    type: object
  model.DerivedChecklistItem:
    properties:
      asset_types:
        description: Applicable asset types if scope is "asset"
        items:
          type: string
        type: array
      category:
        type: string
      description:
        type: string
      evidence:
        additionalProperties: true
        description: Relevant metadata for auto-derived status
        type: object
      evidence_rules:
        description: Rules for auto-derivation
        items:
          $ref: '#/definitions/model.EvidenceRule'
        type: array
      id:
        type: string
      notes:
        description: From manual assignment
        type: string
      recommendation:
        type: string
      required:
        type: boolean
      scope:
        description: '"global" or "asset"'
        type: string
      script_controlled:
        description: Can be controlled by Lua scripts
        type: boolean
      source:
        description: '"auto" or "manual"'
        type: string
      status:
        description: '"yes", "no", "na"'
        type: string
      title:
        type: string
      updated_at:
        description: From manual assignment
        type: string
    type: object
  model.EvidenceRule:
    properties:
      key:
        description: e.g., "http.title", "last_scanned_at"
        type: string
      op:
        description: '"exists", "eq", "regex", "gte_days_since"'
        type: string
      source:
        description: '"scan_metadata"'
        type: string
      value:
        description: Value for "eq", "regex", "gte_days_since"
    type: object
  v1.AssetCatalogueResponse:
    properties:
      assets:
        items:
          $ref: '#/definitions/v1.AssetSummary'
        type: array
      total:
        type: integer
    required:
    - assets
    - total
    type: object
  v1.AssetDetails:
    properties:
      discovered_at:
        type: string
      dns_records:
        allOf:
        - $ref: '#/definitions/v1.DNSRecords'
        description: DNS records for domains/subdomains
      id:
        type: string
      last_scanned_at:
        type: string
      properties:
        additionalProperties: true
        type: object
      scan_count:
        type: integer
      scan_results:
        items:
          $ref: '#/definitions/v1.ScanResult'
        type: array
      status:
        type: string
      tags:
        description: Tags like "http", "cf-proxied", etc.
        items:
          type: string
        type: array
      type:
        type: string
      value:
        type: string
    required:
    - discovered_at
    - id
    - scan_count
    - status
    - type
    - value
    type: object
  v1.AssetDetailsResponse:
    properties:
      asset:
        $ref: '#/definitions/v1.AssetDetails'
    required:
    - asset
    type: object
  v1.AssetSummary:
    properties:
      discovered_at:
        type: string
      id:
        type: string
      last_scanned_at:
        type: string
      scan_count:
        type: integer
      status:
        example: discovered,scanning,scanned,error
        type: string
      type:
        example: domain,subdomain,ip,service
        type: string
      value:
        type: string
    required:
    - discovered_at
    - id
    - scan_count
    - status
    - type
    - value
    type: object
  v1.DNSRecords:
    properties:
      a:
        description: A records (IPv4)
        items:
          type: string
        type: array
      aaaa:
        description: AAAA records (IPv6)
        items:
          type: string
        type: array
      cname:
        description: CNAME records
        items:
          type: string
        type: array
      mx:
        description: MX records (mail exchange)
        items:
          type: string
        type: array
      ns:
        description: NS records (name servers)
        items:
          type: string
        type: array
      ptr:
        description: PTR records (reverse DNS)
        items:
          type: string
        type: array
      soa:
        description: SOA records (start of authority)
        items:
          type: string
        type: array
      txt:
        description: TXT records
        items:
          type: string
        type: array
    type: object
  v1.DiscoverAssetsRequest:
    properties:
      hosts:
        example:
        - example.com
        - 192.168.1.1
        items:
          type: string
        type: array
    required:
    - hosts
    type: object
  v1.DiscoverAssetsResponse:
    properties:
      host_count:
        type: integer
      job_id:
        type: string
      message:
        type: string
      started_at:
        type: string
    required:
    - host_count
    - job_id
    - message
    - started_at
    type: object
  v1.ErrorResponse:
    properties:
      code:
        type: integer
      details:
        additionalProperties:
          type: string
        type: object
      error:
        type: string
    required:
    - code
    - error
    type: object
  v1.HealthResponse:
    properties:
      services:
        additionalProperties:
          type: string
        type: object
      status:
        example: healthy,unhealthy
        type: string
      timestamp:
        type: string
      version:
        type: string
    required:
    - services
    - status
    - timestamp
    type: object
  v1.JobProgress:
    properties:
      completed:
        type: integer
      failed:
        type: integer
      total:
        type: integer
    required:
    - completed
    - failed
    - total
    type: object
  v1.JobStatusResponse:
    properties:
      completed_at:
        type: string
      error:
        type: string
      job_id:
        type: string
      progress:
        $ref: '#/definitions/v1.JobProgress'
      started_at:
        type: string
      status:
        example: pending,running,completed,failed
        type: string
    required:
    - job_id
    - progress
    - started_at
    - status
    type: object
  v1.ScanResult:
    properties:
      duration:
        type: string
      error:
        type: string
      executed_at:
        type: string
      id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      output:
        items:
          type: string
        type: array
      script_name:
        type: string
      success:
        type: boolean
    required:
    - duration
    - executed_at
    - id
    - script_name
    - success
    type: object
  v1.StartAllAssetsScanRequest:
    properties:
      asset_types:
        example:
        - domain
        - ip
        - service
        items:
          type: string
        type: array
      scripts:
        items:
          type: string
        type: array
    type: object
  v1.StartAllAssetsScanResponse:
    properties:
      asset_count:
        type: integer
      job_id:
        type: string
      message:
        type: string
      started_at:
        type: string
    required:
    - asset_count
    - job_id
    - message
    - started_at
    type: object
  v1.StartAssetScanRequest:
    properties:
      scripts:
        example:
        - vulnerability_scan.lua
        - port_scan.lua
        items:
          type: string
        type: array
    type: object
  v1.StartAssetScanResponse:
    properties:
      asset_id:
        type: string
      job_id:
        type: string
      message:
        type: string
      started_at:
        type: string
    required:
    - asset_id
    - job_id
    - message
    - started_at
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.example.com/support
  description: A powerful asset discovery and scanning API with Lua script support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Asset Scanner API
  version: "1.0"
paths:
  /assets/{id}:
    get:
      description: Get detailed information about a specific asset including scan
        results
      parameters:
      - description: Asset ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.AssetDetailsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get asset details
      tags:
      - assets
  /assets/{id}/scan:
    post:
      consumes:
      - application/json
      description: Start scanning a specific asset with specified scripts
      parameters:
      - description: Asset ID
        in: path
        name: id
        required: true
        type: string
      - description: Scan configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.StartAssetScanRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/v1.StartAssetScanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Start asset scan
      tags:
      - assets
  /assets/catalogue:
    get:
      description: Retrieve all discovered assets for 2D view
      parameters:
      - description: Filter by asset type
        in: query
        name: type
        type: string
      - description: Filter by asset status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.AssetCatalogueResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get asset catalogue
      tags:
      - assets
  /assets/discover:
    post:
      consumes:
      - application/json
      description: Start asset discovery for a list of hosts using integrated recon
        service
      parameters:
      - description: Hosts to discover
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.DiscoverAssetsRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/v1.DiscoverAssetsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Discover assets
      tags:
      - assets
  /assets/scan:
    post:
      consumes:
      - application/json
      description: Start scanning all assets with specified scripts
      parameters:
      - description: Scan configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.StartAllAssetsScanRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/v1.StartAllAssetsScanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Start scan of all assets
      tags:
      - assets
  /checklist/asset/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve all checklist items applicable to a specific asset with
        their current status
      parameters:
      - description: Asset ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.DerivedChecklistItem'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get asset-specific checklist items
      tags:
      - checklist
  /checklist/global:
    get:
      consumes:
      - application/json
      description: Retrieve all global checklist items with their current status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.DerivedChecklistItem'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get global checklist items
      tags:
      - checklist
  /checklist/status:
    post:
      consumes:
      - application/json
      description: Set the status (yes/no/na) of a checklist item, either global or
        asset-specific
      parameters:
      - description: Status update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.SetStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Set checklist item status
      tags:
      - checklist
  /checklist/templates:
    get:
      consumes:
      - application/json
      description: Retrieve all available checklist item templates
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ChecklistItemTemplate'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: List all checklist templates
      tags:
      - checklist
  /checklist/templates/upload:
    post:
      consumes:
      - application/json
      description: Upload a JSON file containing checklist templates that will overwrite
        all existing templates
      parameters:
      - description: Templates upload request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.UploadTemplatesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Upload checklist templates from JSON
      tags:
      - checklist
  /health:
    get:
      description: Check if the service is healthy
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.HealthResponse'
      summary: Health check
      tags:
      - health
  /jobs/{id}:
    get:
      description: Get the status and progress of a job
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.JobStatusResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get job status
      tags:
      - jobs
swagger: "2.0"
