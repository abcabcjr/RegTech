basePath: /
definitions:
  handler.SetStatusRequest:
    properties:
      asset_id:
        description: Asset ID (empty for global items)
        example: asset-123
        type: string
      item_id:
        description: Checklist item template ID
        example: security-policy-001
        type: string
      notes:
        description: Optional notes
        example: Verified during security audit
        type: string
      status:
        description: 'Status: yes, no, or na'
        enum:
        - "yes"
        - "no"
        - na
        example: "yes"
        type: string
    type: object
  handler.UploadTemplatesRequest:
    properties:
      templates:
        description: Array of checklist templates to upload
        items:
          $ref: '#/definitions/model.ChecklistItemTemplate'
        type: array
    type: object
  model.AssetCoverage:
    properties:
      asset_id:
        type: string
      asset_type:
        type: string
      asset_value:
        type: string
      notes:
        type: string
      status:
        description: '"yes", "no" (excludes "na")'
        type: string
      updated_at:
        type: string
    type: object
  model.ChecklistItemInfo:
    properties:
      law_refs:
        items:
          type: string
        type: array
      priority:
        description: '"must", "should", "may"'
        type: string
      resources:
        items:
          $ref: '#/definitions/model.ChecklistItemResource'
        type: array
      what_it_means:
        type: string
      why_it_matters:
        type: string
    type: object
  model.ChecklistItemResource:
    properties:
      title:
        type: string
      url:
        type: string
    type: object
  model.ChecklistItemTemplate:
    properties:
      asset_types:
        description: Applicable asset types if scope is "asset"
        items:
          type: string
        type: array
      category:
        type: string
      description:
        type: string
      evidence_rules:
        description: Rules for auto-derivation
        items:
          $ref: '#/definitions/model.EvidenceRule'
        type: array
      help_text:
        description: Extended metadata fields for rich UI display
        type: string
      id:
        type: string
      info:
        $ref: '#/definitions/model.ChecklistItemInfo'
      kind:
        description: '"manual" or "auto"'
        type: string
      read_only:
        type: boolean
      recommendation:
        type: string
      required:
        type: boolean
      scope:
        description: '"global" or "asset"'
        type: string
      script_controlled:
        description: Can be controlled by Lua scripts
        type: boolean
      title:
        type: string
      why_matters:
        type: string
    type: object
  model.DerivedChecklistItem:
    properties:
      asset_types:
        description: Applicable asset types if scope is "asset"
        items:
          type: string
        type: array
      attachments:
        description: File attachment IDs
        items:
          type: string
        type: array
      category:
        type: string
      covered_assets:
        description: Assets covered by this check
        items:
          $ref: '#/definitions/model.AssetCoverage'
        type: array
      description:
        type: string
      evidence:
        additionalProperties: true
        description: Relevant metadata for auto-derived status
        type: object
      evidence_rules:
        description: Rules for auto-derivation
        items:
          $ref: '#/definitions/model.EvidenceRule'
        type: array
      help_text:
        description: Extended metadata fields for rich UI display
        type: string
      id:
        type: string
      info:
        $ref: '#/definitions/model.ChecklistItemInfo'
      kind:
        description: '"manual" or "auto"'
        type: string
      notes:
        description: From manual assignment
        type: string
      read_only:
        type: boolean
      recommendation:
        type: string
      required:
        type: boolean
      scope:
        description: '"global" or "asset"'
        type: string
      script_controlled:
        description: Can be controlled by Lua scripts
        type: boolean
      source:
        description: '"auto" or "manual"'
        type: string
      status:
        description: '"yes", "no", "na"'
        type: string
      title:
        type: string
      updated_at:
        description: From manual assignment
        type: string
      why_matters:
        type: string
    type: object
  model.EvidenceRule:
    properties:
      key:
        description: e.g., "http.title", "last_scanned_at"
        type: string
      op:
        description: '"exists", "eq", "regex", "gte_days_since"'
        type: string
      source:
        description: '"scan_metadata"'
        type: string
      value:
        description: Value for "eq", "regex", "gte_days_since"
    type: object
  model.FileAttachment:
    properties:
      asset_id:
        description: 'Optional: links to specific asset'
        type: string
      checklist_key:
        description: Compliance context
        type: string
      content_type:
        type: string
      description:
        type: string
      error:
        description: Error message if status is "failed"
        type: string
      file_name:
        type: string
      file_path:
        description: Storage metadata
        type: string
      file_size:
        type: integer
      id:
        type: string
      original_name:
        type: string
      status:
        description: Status
        type: string
      uploaded_at:
        type: string
      uploaded_by:
        description: 'Future: user identification'
        type: string
    type: object
  model.FileAttachmentSummary:
    properties:
      content_type:
        type: string
      description:
        type: string
      file_name:
        type: string
      file_size:
        type: integer
      id:
        type: string
      original_name:
        type: string
      status:
        type: string
      uploaded_at:
        type: string
    type: object
  model.FileUploadResponse:
    properties:
      content_type:
        type: string
      file_id:
        type: string
      file_name:
        type: string
      file_size:
        type: integer
      status:
        type: string
      uploaded_at:
        type: string
    type: object
  v1.AssetCatalogueResponse:
    properties:
      assets:
        items:
          $ref: '#/definitions/v1.AssetSummary'
        type: array
      total:
        type: integer
    required:
    - assets
    - total
    type: object
  v1.AssetDetails:
    properties:
      discovered_at:
        type: string
      dns_records:
        allOf:
        - $ref: '#/definitions/v1.DNSRecords'
        description: DNS records for domains/subdomains
      id:
        type: string
      last_scanned_at:
        type: string
      properties:
        additionalProperties: true
        type: object
      scan_count:
        type: integer
      scan_results:
        items:
          $ref: '#/definitions/v1.ScanResult'
        type: array
      status:
        type: string
      tags:
        description: Tags like "http", "cf-proxied", etc.
        items:
          type: string
        type: array
      type:
        type: string
      value:
        type: string
    required:
    - discovered_at
    - id
    - scan_count
    - status
    - type
    - value
    type: object
  v1.AssetDetailsResponse:
    properties:
      asset:
        $ref: '#/definitions/v1.AssetDetails'
    required:
    - asset
    type: object
  v1.AssetSummary:
    properties:
      discovered_at:
        type: string
      id:
        type: string
      last_scanned_at:
        type: string
      scan_count:
        type: integer
      status:
        example: discovered,scanning,scanned,error
        type: string
      type:
        example: domain,subdomain,ip,service
        type: string
      value:
        type: string
    required:
    - discovered_at
    - id
    - scan_count
    - status
    - type
    - value
    type: object
  v1.Attachment:
    properties:
      name:
        example: evidence.pdf
        type: string
      note:
        example: Email headers and logs
        type: string
    required:
    - name
    type: object
  v1.CreateIncidentRequest:
    properties:
      attachments:
        items:
          $ref: '#/definitions/v1.Attachment'
        type: array
      causeTag:
        example: phishing,vuln_exploit,misconfig,malware,other
        type: string
      downtimeMinutes:
        example: 30
        type: integer
      financialImpactPct:
        example: 2.5
        type: number
      initialDetails:
        $ref: '#/definitions/v1.InitialDetails'
      recurring:
        type: boolean
      sectorPreset:
        example: financial
        type: string
      significant:
        type: boolean
      usersAffected:
        example: 100
        type: integer
    required:
    - causeTag
    - initialDetails
    type: object
  v1.DNSRecords:
    properties:
      a:
        description: A records (IPv4)
        items:
          type: string
        type: array
      aaaa:
        description: AAAA records (IPv6)
        items:
          type: string
        type: array
      cname:
        description: CNAME records
        items:
          type: string
        type: array
      mx:
        description: MX records (mail exchange)
        items:
          type: string
        type: array
      ns:
        description: NS records (name servers)
        items:
          type: string
        type: array
      ptr:
        description: PTR records (reverse DNS)
        items:
          type: string
        type: array
      soa:
        description: SOA records (start of authority)
        items:
          type: string
        type: array
      txt:
        description: TXT records
        items:
          type: string
        type: array
    type: object
  v1.DiscoverAssetsRequest:
    properties:
      hosts:
        example:
        - example.com
        - 192.168.1.1
        items:
          type: string
        type: array
    required:
    - hosts
    type: object
  v1.DiscoverAssetsResponse:
    properties:
      host_count:
        type: integer
      job_id:
        type: string
      message:
        type: string
      started_at:
        type: string
    required:
    - host_count
    - job_id
    - message
    - started_at
    type: object
  v1.ErrorResponse:
    properties:
      code:
        type: integer
      details:
        additionalProperties:
          type: string
        type: object
      error:
        type: string
    required:
    - code
    - error
    type: object
  v1.FinalDetails:
    properties:
      crossBorderDesc:
        example: No cross-border effects identified
        type: string
      gravity:
        example: high
        type: string
      impact:
        example: No data exfiltration occurred
        type: string
      lessons:
        example: Need for regular security training
        type: string
      mitigations:
        example: Enhanced email filtering implemented
        type: string
      rootCause:
        example: Lack of email security awareness
        type: string
    type: object
  v1.GenericStatusResponse:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  v1.HealthResponse:
    properties:
      services:
        additionalProperties:
          type: string
        type: object
      status:
        example: healthy,unhealthy
        type: string
      timestamp:
        type: string
      version:
        type: string
    required:
    - services
    - status
    - timestamp
    type: object
  v1.IncidentDetails:
    properties:
      final:
        $ref: '#/definitions/v1.FinalDetails'
      initial:
        $ref: '#/definitions/v1.InitialDetails'
      update:
        $ref: '#/definitions/v1.UpdateDetails'
    type: object
  v1.IncidentResponse:
    properties:
      attachments:
        items:
          $ref: '#/definitions/v1.Attachment'
        type: array
      causeTag:
        type: string
      createdAt:
        type: string
      details:
        $ref: '#/definitions/v1.IncidentDetails'
      downtimeMinutes:
        type: integer
      financialImpactPct:
        type: number
      id:
        type: string
      recurring:
        type: boolean
      sectorPreset:
        type: string
      significant:
        type: boolean
      stage:
        example: initial,update,final
        type: string
      updatedAt:
        type: string
      usersAffected:
        type: integer
    required:
    - causeTag
    - createdAt
    - details
    - id
    - stage
    - updatedAt
    type: object
  v1.IncidentStatsResponse:
    properties:
      byCause:
        additionalProperties:
          type: integer
        type: object
      byStage:
        additionalProperties:
          type: integer
        type: object
      recurringIncidents:
        type: integer
      significantIncidents:
        type: integer
      totalIncidents:
        type: integer
    required:
    - byCause
    - byStage
    - recurringIncidents
    - significantIncidents
    - totalIncidents
    type: object
  v1.IncidentSummaryResponse:
    properties:
      causeTag:
        type: string
      createdAt:
        type: string
      id:
        type: string
      recurring:
        type: boolean
      significant:
        type: boolean
      stage:
        type: string
      summary:
        type: string
      title:
        type: string
      updatedAt:
        type: string
    required:
    - causeTag
    - createdAt
    - id
    - stage
    - summary
    - title
    - updatedAt
    type: object
  v1.InitialDetails:
    properties:
      detectedAt:
        example: "2024-01-15T10:30:00Z"
        type: string
      possibleCrossBorder:
        type: boolean
      summary:
        example: Multiple users reported suspicious emails
        type: string
      suspectedIllegal:
        type: boolean
      title:
        example: Security Incident - Phishing Attack
        type: string
    required:
    - detectedAt
    - summary
    - title
    type: object
  v1.JobProgress:
    properties:
      completed:
        type: integer
      failed:
        type: integer
      total:
        type: integer
    required:
    - completed
    - failed
    - total
    type: object
  v1.JobStatusResponse:
    properties:
      completed_at:
        type: string
      error:
        type: string
      job_id:
        type: string
      progress:
        $ref: '#/definitions/v1.JobProgress'
      started_at:
        type: string
      status:
        example: pending,running,completed,failed
        type: string
    required:
    - job_id
    - progress
    - started_at
    - status
    type: object
  v1.ListIncidentSummariesResponse:
    properties:
      summaries:
        items:
          $ref: '#/definitions/v1.IncidentSummaryResponse'
        type: array
      total:
        type: integer
    required:
    - summaries
    - total
    type: object
  v1.ListIncidentsResponse:
    properties:
      incidents:
        items:
          $ref: '#/definitions/v1.IncidentResponse'
        type: array
      total:
        type: integer
    required:
    - incidents
    - total
    type: object
  v1.ScanResult:
    properties:
      duration:
        type: string
      error:
        type: string
      executed_at:
        type: string
      id:
        type: string
      metadata:
        additionalProperties: true
        type: object
      output:
        items:
          type: string
        type: array
      script_name:
        type: string
      success:
        type: boolean
    required:
    - duration
    - executed_at
    - id
    - script_name
    - success
    type: object
  v1.StartAllAssetsScanRequest:
    properties:
      asset_types:
        example:
        - domain
        - ip
        - service
        items:
          type: string
        type: array
      scripts:
        items:
          type: string
        type: array
    type: object
  v1.StartAllAssetsScanResponse:
    properties:
      asset_count:
        type: integer
      job_id:
        type: string
      message:
        type: string
      started_at:
        type: string
    required:
    - asset_count
    - job_id
    - message
    - started_at
    type: object
  v1.StartAssetScanRequest:
    properties:
      scripts:
        example:
        - vulnerability_scan.lua
        - port_scan.lua
        items:
          type: string
        type: array
    type: object
  v1.StartAssetScanResponse:
    properties:
      asset_id:
        type: string
      job_id:
        type: string
      message:
        type: string
      started_at:
        type: string
    required:
    - asset_id
    - job_id
    - message
    - started_at
    type: object
  v1.UpdateDetails:
    properties:
      corrections:
        example: Blocked malicious domains
        type: string
      gravity:
        example: high
        type: string
      impact:
        example: Email system compromised
        type: string
      iocs:
        example:
        - malicious-domain.com
        - suspicious-ip-address
        items:
          type: string
        type: array
    type: object
  v1.UpdateIncidentRequest:
    properties:
      attachments:
        items:
          $ref: '#/definitions/v1.Attachment'
        type: array
      causeTag:
        example: phishing,vuln_exploit,misconfig,malware,other
        type: string
      downtimeMinutes:
        example: 30
        type: integer
      finalDetails:
        $ref: '#/definitions/v1.FinalDetails'
      financialImpactPct:
        example: 2.5
        type: number
      initialDetails:
        $ref: '#/definitions/v1.InitialDetails'
      recurring:
        type: boolean
      sectorPreset:
        example: financial
        type: string
      significant:
        type: boolean
      stage:
        example: initial,update,final
        type: string
      updateDetails:
        $ref: '#/definitions/v1.UpdateDetails'
      usersAffected:
        example: 100
        type: integer
    required:
    - causeTag
    - stage
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.example.com/support
  description: A powerful asset discovery and scanning API with Lua script support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Asset Scanner API
  version: "1.0"
paths:
  /assets/{id}:
    get:
      description: Get detailed information about a specific asset including scan
        results
      parameters:
      - description: Asset ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.AssetDetailsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get asset details
      tags:
      - assets
  /assets/{id}/scan:
    post:
      consumes:
      - application/json
      description: Start scanning a specific asset with specified scripts
      parameters:
      - description: Asset ID
        in: path
        name: id
        required: true
        type: string
      - description: Scan configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.StartAssetScanRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/v1.StartAssetScanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Start asset scan
      tags:
      - assets
  /assets/catalogue:
    get:
      description: Retrieve all discovered assets for 2D view
      parameters:
      - description: Filter by asset type
        in: query
        name: type
        type: string
      - description: Filter by asset status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.AssetCatalogueResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get asset catalogue
      tags:
      - assets
  /assets/discover:
    post:
      consumes:
      - application/json
      description: Start asset discovery for a list of hosts using integrated recon
        service
      parameters:
      - description: Hosts to discover
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.DiscoverAssetsRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/v1.DiscoverAssetsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Discover assets
      tags:
      - assets
  /assets/scan:
    post:
      consumes:
      - application/json
      description: Start scanning all assets with specified scripts
      parameters:
      - description: Scan configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.StartAllAssetsScanRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/v1.StartAllAssetsScanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Start scan of all assets
      tags:
      - assets
  /checklist/asset-templates:
    get:
      consumes:
      - application/json
      description: Retrieve all asset-scoped checklist templates with their coverage
        across all assets
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.DerivedChecklistItem'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get all asset-scoped templates with coverage
      tags:
      - checklist
  /checklist/asset/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve all checklist items applicable to a specific asset with
        their current status
      parameters:
      - description: Asset ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.DerivedChecklistItem'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get asset-specific checklist items
      tags:
      - checklist
  /checklist/coverage/summary:
    get:
      consumes:
      - application/json
      description: Get a summary of compliance coverage showing which assets are covered
        by compliance checks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get compliance coverage summary
      tags:
      - checklist
  /checklist/global:
    get:
      consumes:
      - application/json
      description: Retrieve all global checklist items with their current status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.DerivedChecklistItem'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get global checklist items
      tags:
      - checklist
  /checklist/status:
    post:
      consumes:
      - application/json
      description: Set the status (yes/no/na) of a checklist item, either global or
        asset-specific
      parameters:
      - description: Status update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.SetStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Set checklist item status
      tags:
      - checklist
  /checklist/templates:
    get:
      consumes:
      - application/json
      description: Retrieve all available checklist item templates with covered assets
        that are not compliant (status "no")
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.DerivedChecklistItem'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: List all checklist templates with non-compliant asset coverage
      tags:
      - checklist
  /checklist/templates/upload:
    post:
      consumes:
      - application/json
      description: Upload a JSON file containing checklist templates that will overwrite
        all existing templates
      parameters:
      - description: Templates upload request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.UploadTemplatesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Upload checklist templates from JSON
      tags:
      - checklist
  /files:
    get:
      description: List all file attachments for a specific checklist key
      parameters:
      - description: Checklist key (e.g., global:item1 or asset:assetId:item1)
        in: query
        name: checklistKey
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.FileAttachmentSummary'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: List file attachments
      tags:
      - files
  /files/{fileId}:
    delete:
      description: Delete a file attachment and remove it from MinIO storage
      parameters:
      - description: File ID
        in: path
        name: fileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Delete file attachment
      tags:
      - files
    get:
      description: Get metadata for a file attachment
      parameters:
      - description: File ID
        in: path
        name: fileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.FileAttachment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get file information
      tags:
      - files
  /files/{fileId}/download:
    get:
      description: Download a file attachment directly
      parameters:
      - description: File ID
        in: path
        name: fileId
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: File content
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Download file
      tags:
      - files
  /files/limits:
    get:
      description: Get information about file upload limits and restrictions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get upload limits
      tags:
      - files
  /files/status:
    get:
      description: Get the current status of the MinIO file upload service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get file service status
      tags:
      - files
  /files/supported-types:
    get:
      description: Get the list of content types that are supported for file uploads
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get supported content types
      tags:
      - files
  /files/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a file directly as part of a checklist item
      parameters:
      - description: Checklist key (e.g., global:item1)
        in: formData
        name: checklist_key
        required: true
        type: string
      - description: File description
        in: formData
        name: description
        type: string
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.FileUploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Upload file
      tags:
      - files
  /health:
    get:
      description: Check if the service is healthy
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.HealthResponse'
      summary: Health check
      tags:
      - health
  /incidents:
    get:
      consumes:
      - application/json
      description: Retrieve all incidents with optional filtering
      parameters:
      - description: Filter by stages (comma-separated)
        in: query
        name: stages
        type: string
      - description: Filter by cause tags (comma-separated)
        in: query
        name: causeTags
        type: string
      - description: Filter by significant incidents only
        in: query
        name: significant
        type: boolean
      - description: Filter by recurring incidents only
        in: query
        name: recurring
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.ListIncidentsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: List incidents
      tags:
      - incidents
    post:
      consumes:
      - application/json
      description: Create a new incident record with initial details
      parameters:
      - description: Incident creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.CreateIncidentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v1.IncidentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Create a new incident
      tags:
      - incidents
  /incidents/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an incident by ID
      parameters:
      - description: Incident ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.GenericStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Delete incident
      tags:
      - incidents
    get:
      consumes:
      - application/json
      description: Retrieve a specific incident by its ID
      parameters:
      - description: Incident ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.IncidentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get incident by ID
      tags:
      - incidents
    put:
      consumes:
      - application/json
      description: Update an existing incident record
      parameters:
      - description: Incident ID
        in: path
        name: id
        required: true
        type: string
      - description: Incident update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateIncidentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.IncidentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Update incident
      tags:
      - incidents
  /incidents/stats:
    get:
      consumes:
      - application/json
      description: Retrieve statistics about incidents
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.IncidentStatsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get incident statistics
      tags:
      - incidents
  /incidents/summaries:
    get:
      consumes:
      - application/json
      description: Retrieve incident summaries with optional filtering
      parameters:
      - description: Filter by stages (comma-separated)
        in: query
        name: stages
        type: string
      - description: Filter by cause tags (comma-separated)
        in: query
        name: causeTags
        type: string
      - description: Filter by significant incidents only
        in: query
        name: significant
        type: boolean
      - description: Filter by recurring incidents only
        in: query
        name: recurring
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.ListIncidentSummariesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: List incident summaries
      tags:
      - incidents
  /jobs/{id}:
    get:
      description: Get the status and progress of a job
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.JobStatusResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get job status
      tags:
      - jobs
swagger: "2.0"
