-- @title CVE Vulnerability Analysis (Article 11 Compliance)
-- @description Identifies known CVEs and security vulnerabilities in public services in compliance with Moldovan Cybersecurity Law Article 11 (Security Measures)
-- @category Vulnerability Assessment
-- @compliance_article Article 11 - Security Measures
-- @moldovan_law Law no. 142/2023
-- @author RegTech Scanner
-- @version 1.0
-- @asset_types service
-- @requires_passed basic_info.lua,banner_grab.lua

-- Only run on service assets
if asset.type ~= "service" then
    log("Skipping CVE analysis - not a service asset")
    return
end

-- Extract host, port, and protocol from service value
local host, port, protocol = string.match(asset.value, "([^:]+):(%d+)/(%w+)")
if not host or not port or not protocol then
    log("Could not parse service format: " .. asset.value)
    return
end

port = tonumber(port)
log("Analyzing CVE footprint for: " .. host .. ":" .. port .. "/" .. protocol)

-- Common vulnerable services and their CVE patterns
local vulnerable_services = {
    -- Web servers
    apache = {
        patterns = {"Apache", "httpd"},
        common_cves = {
            ["2.2.0-2.2.34"] = {"CVE-2017-3167", "CVE-2017-3169", "CVE-2017-7679", "CVE-2017-9788"},
            ["2.4.0-2.4.29"] = {"CVE-2017-15710", "CVE-2017-15715", "CVE-2018-1283", "CVE-2018-1301", "CVE-2018-1302", "CVE-2018-1303"},
            ["2.4.30-2.4.39"] = {"CVE-2019-0196", "CVE-2019-0197", "CVE-2019-0211", "CVE-2019-0215", "CVE-2019-0217", "CVE-2019-9517"},
            ["2.4.40-2.4.49"] = {"CVE-2021-40438", "CVE-2021-41524", "CVE-2021-41773", "CVE-2021-42013", "CVE-2021-44224", "CVE-2021-44790"},
            ["2.4.50-2.4.53"] = {"CVE-2022-22719", "CVE-2022-22720", "CVE-2022-22721", "CVE-2022-28330", "CVE-2022-28614", "CVE-2022-28615"},
            ["2.4.54-2.4.57"] = {"CVE-2022-37436", "CVE-2023-25690", "CVE-2023-27522", "CVE-2023-31122", "CVE-2024-24795"}
        },
        severity_mapping = {
            ["CVE-2017-9788"] = "CRITICAL",  -- Uninitialized memory reflection
            ["CVE-2019-0211"] = "CRITICAL",  -- Privilege escalation
            ["CVE-2021-41773"] = "CRITICAL", -- Path traversal
            ["CVE-2021-42013"] = "CRITICAL", -- Path traversal and RCE
            ["CVE-2021-44790"] = "CRITICAL", -- Buffer overflow
            ["CVE-2022-22720"] = "HIGH",     -- HTTP request smuggling
            ["CVE-2022-28614"] = "HIGH",     -- Read beyond bounds
            ["CVE-2023-25690"] = "HIGH",     -- HTTP response smuggling
            ["CVE-2024-24795"] = "HIGH"      -- HTTP response splitting
        }
    },
    
    nginx = {
        patterns = {"nginx", "Nginx"},
        common_cves = {
            ["1.0.0-1.18.0"] = {"CVE-2019-20372", "CVE-2017-7529", "CVE-2016-0742", "CVE-2016-0746", "CVE-2016-0747", "CVE-2016-4450"},
            ["1.19.0-1.20.1"] = {"CVE-2021-23017", "CVE-2021-3618"},
            ["1.21.0-1.22.1"] = {"CVE-2022-41741", "CVE-2022-41742"},
            ["1.23.0-1.24.0"] = {"CVE-2023-44487", "CVE-2024-7347"}
        },
        severity_mapping = {
            ["CVE-2016-0742"] = "HIGH",     -- Invalid pointer dereference
            ["CVE-2016-0746"] = "HIGH",     -- Use-after-free
            ["CVE-2016-0747"] = "HIGH",     -- Resolver buffer overflow
            ["CVE-2017-7529"] = "HIGH",     -- Integer overflow
            ["CVE-2021-23017"] = "HIGH",    -- DNS resolver issue
            ["CVE-2021-3618"] = "HIGH",     -- ALPN buffer overflow
            ["CVE-2022-41741"] = "MEDIUM",  -- Memory disclosure
            ["CVE-2023-44487"] = "HIGH",    -- HTTP/2 rapid reset attack
            ["CVE-2024-7347"] = "MEDIUM"    -- Request body bypass
        }
    },
    
    -- SSH servers
    openssh = {
        patterns = {"OpenSSH", "SSH"},
        common_cves = {
            ["6.0-6.9"] = {"CVE-2016-0777", "CVE-2016-0778", "CVE-2015-5600", "CVE-2015-6563", "CVE-2015-6564"},
            ["7.0-7.3"] = {"CVE-2016-10009", "CVE-2016-10010", "CVE-2016-10011", "CVE-2016-10012", "CVE-2017-15906"},
            ["7.4-8.0"] = {"CVE-2018-15473", "CVE-2018-20685", "CVE-2019-6109", "CVE-2019-6110", "CVE-2019-6111"},
            ["8.1-8.9"] = {"CVE-2020-14145", "CVE-2021-41617", "CVE-2021-28041", "CVE-2020-15778"},
            ["9.0-9.3"] = {"CVE-2023-38408", "CVE-2023-48795", "CVE-2023-51385"},
            ["9.4-9.6"] = {"CVE-2024-6387", "CVE-2024-6409"}
        },
        severity_mapping = {
            ["CVE-2015-5600"] = "HIGH",     -- Keyboard-interactive authentication bypass
            ["CVE-2016-0777"] = "HIGH",     -- Information leak
            ["CVE-2016-10009"] = "HIGH",    -- Untrusted search path
            ["CVE-2018-15473"] = "MEDIUM",  -- Username enumeration
            ["CVE-2019-6109"] = "MEDIUM",   -- Missing character encoding
            ["CVE-2019-6110"] = "MEDIUM",   -- Output manipulation
            ["CVE-2019-6111"] = "MEDIUM",   -- SCP client spoofing
            ["CVE-2021-41617"] = "HIGH",    -- Privilege escalation
            ["CVE-2023-38408"] = "CRITICAL", -- Remote code execution
            ["CVE-2023-48795"] = "MEDIUM",  -- Terrapin attack
            ["CVE-2024-6387"] = "CRITICAL", -- Signal handler race condition RCE
            ["CVE-2024-6409"] = "HIGH"      -- Race condition in ObscureKeystrokeTiming
        }
    },
    
    -- FTP servers
    vsftpd = {
        patterns = {"vsftpd", "vsFTPd"},
        common_cves = {
            ["2.3.4"] = {"CVE-2011-2523"}, -- Backdoor
            ["3.0.0-3.0.3"] = {"CVE-2015-1419"}
        },
        severity_mapping = {
            ["CVE-2011-2523"] = "CRITICAL", -- Backdoor in version 2.3.4
            ["CVE-2015-1419"] = "HIGH"      -- Config bypass
        }
    },
    
    -- Database servers
    mysql = {
        patterns = {"MySQL", "MariaDB"},
        common_cves = {
            ["5.5.0-5.5.59"] = {"CVE-2017-3599", "CVE-2017-3651", "CVE-2017-3653", "CVE-2018-2755", "CVE-2018-2761", "CVE-2018-2767"},
            ["5.6.0-5.6.39"] = {"CVE-2018-2562", "CVE-2018-2612", "CVE-2018-2622", "CVE-2018-2640", "CVE-2018-2665", "CVE-2018-2668"},
            ["5.7.0-5.7.29"] = {"CVE-2019-2534", "CVE-2019-2614", "CVE-2019-2627", "CVE-2019-2628", "CVE-2020-2574", "CVE-2020-2580"},
            ["8.0.0-8.0.19"] = {"CVE-2020-2570", "CVE-2020-2573", "CVE-2020-14539", "CVE-2020-14540", "CVE-2020-14550", "CVE-2020-14553"},
            ["8.0.20-8.0.34"] = {"CVE-2021-2022", "CVE-2021-2030", "CVE-2021-35604", "CVE-2022-21245", "CVE-2022-21270", "CVE-2023-21836"}
        },
        severity_mapping = {
            ["CVE-2017-3599"] = "HIGH",     -- Pluggable authentication bypass
            ["CVE-2018-2755"] = "HIGH",     -- Replication privilege escalation
            ["CVE-2019-2614"] = "HIGH",     -- Server replication privilege escalation  
            ["CVE-2020-2570"] = "MEDIUM",   -- Server optimizer component
            ["CVE-2020-14539"] = "HIGH",    -- Server optimizer component
            ["CVE-2021-2022"] = "HIGH",     -- Server optimizer component
            ["CVE-2022-21245"] = "HIGH",    -- Server security privileges component
            ["CVE-2023-21836"] = "HIGH"     -- Server optimizer component
        }
    },
    
    postgresql = {
        patterns = {"PostgreSQL", "postgres"},
        common_cves = {
            ["9.0-9.6"] = {"CVE-2018-1058", "CVE-2018-10915", "CVE-2018-10925", "CVE-2019-10127", "CVE-2019-10128"},
            ["10.0-12.0"] = {"CVE-2019-10164", "CVE-2019-10208", "CVE-2020-1720", "CVE-2020-14349", "CVE-2020-14350"},
            ["13.0-14.9"] = {"CVE-2022-1552", "CVE-2023-2454", "CVE-2023-2455", "CVE-2023-39417", "CVE-2023-39418"},
            ["15.0-16.2"] = {"CVE-2024-0985", "CVE-2024-4317", "CVE-2024-7348"}
        },
        severity_mapping = {
            ["CVE-2018-1058"] = "HIGH",     -- Privilege escalation via search_path
            ["CVE-2018-10915"] = "HIGH",    -- Missing authorization
            ["CVE-2019-10164"] = "HIGH",    -- Stack buffer overflow
            ["CVE-2020-1720"] = "HIGH",     -- ALTER ... DEPENDS ON EXTENSION
            ["CVE-2020-14349"] = "HIGH",    -- Uncontrolled search path element
            ["CVE-2022-1552"] = "HIGH",     -- Autovacuum and REINDEX privilege escalation
            ["CVE-2023-2454"] = "HIGH",     -- Schema privilege escalation
            ["CVE-2023-2455"] = "HIGH",     -- Row security policies bypass
            ["CVE-2023-39417"] = "HIGH",    -- Extension script @substitutions@
            ["CVE-2024-0985"] = "HIGH",     -- Non-owner REFRESH MATERIALIZED VIEW CONCURRENTLY
            ["CVE-2024-4317"] = "HIGH",     -- Missing authorization in built-in views
            ["CVE-2024-7348"] = "HIGH"      -- Time-of-check time-of-use race condition
        }
    },
    
    -- Redis
    redis = {
        patterns = {"Redis", "redis-server"},
        common_cves = {
            ["4.0.0-6.0.20"] = {"CVE-2021-32625", "CVE-2021-32626", "CVE-2021-32627", "CVE-2021-32628"},
            ["6.2.0-6.2.13"] = {"CVE-2022-24735", "CVE-2022-24736"},
            ["7.0.0-7.0.11"] = {"CVE-2023-28425", "CVE-2023-28856"}
        },
        severity_mapping = {
            ["CVE-2021-32625"] = "HIGH",    -- Integer overflow in STRALGO
            ["CVE-2021-32626"] = "HIGH",    -- Buffer overflow in PFCOUNT
            ["CVE-2021-32627"] = "HIGH",    -- Integer overflow in SETRANGE
            ["CVE-2021-32628"] = "HIGH",    -- Integer overflow in COPY
            ["CVE-2022-24735"] = "HIGH",    -- Code injection via Lua script
            ["CVE-2022-24736"] = "HIGH",    -- Malformed Lua script crash
            ["CVE-2023-28425"] = "HIGH",    -- Specially crafted MSETNX crash
            ["CVE-2023-28856"] = "HIGH"     -- Authenticated users code execution
        }
    },
    
    -- MongoDB
    mongodb = {
        patterns = {"MongoDB", "mongod"},
        common_cves = {
            ["4.0.0-4.4.18"] = {"CVE-2021-20329", "CVE-2021-32050"},
            ["5.0.0-5.0.14"] = {"CVE-2022-1274", "CVE-2023-1409"},
            ["6.0.0-6.0.4"] = {"CVE-2023-0297", "CVE-2023-1762"}
        },
        severity_mapping = {
            ["CVE-2021-20329"] = "HIGH",    -- Improper certificate validation
            ["CVE-2021-32050"] = "MEDIUM",  -- Improper input validation
            ["CVE-2022-1274"] = "HIGH",     -- Improper privilege management
            ["CVE-2023-0297"] = "HIGH",     -- Improper access control
            ["CVE-2023-1409"] = "HIGH",     -- Improper certificate validation
            ["CVE-2023-1762"] = "HIGH"      -- Improper input validation
        }
    },
    
    -- Microsoft IIS
    iis = {
        patterns = {"Microsoft-IIS", "IIS"},
        common_cves = {
            ["7.0-10.0"] = {"CVE-2017-7269", "CVE-2021-31207", "CVE-2022-21907", "CVE-2022-30209"},
            ["10.0"] = {"CVE-2023-23397", "CVE-2023-36884"}
        },
        severity_mapping = {
            ["CVE-2017-7269"] = "CRITICAL",  -- Buffer overflow in ScStoragePathFromUrl
            ["CVE-2021-31207"] = "HIGH",     -- HTTP protocol stack remote code execution
            ["CVE-2022-21907"] = "HIGH",     -- HTTP protocol stack remote code execution  
            ["CVE-2022-30209"] = "HIGH",     -- SharePoint privilege escalation
            ["CVE-2023-23397"] = "CRITICAL", -- Outlook privilege escalation
            ["CVE-2023-36884"] = "CRITICAL"  -- Office and Windows HTML remote code execution
        }
    },
    
    -- Tomcat
    tomcat = {
        patterns = {"Apache Tomcat", "Tomcat"},
        common_cves = {
            ["8.5.0-8.5.78"] = {"CVE-2020-1938", "CVE-2021-25122", "CVE-2021-25329", "CVE-2021-30640"},
            ["9.0.0-9.0.58"] = {"CVE-2021-41079", "CVE-2022-23181", "CVE-2022-29885"},
            ["10.0.0-10.1.5"] = {"CVE-2023-28708", "CVE-2023-28709", "CVE-2023-41080"}
        },
        severity_mapping = {
            ["CVE-2020-1938"] = "CRITICAL",  -- AJP connector RCE (Ghostcat)
            ["CVE-2021-25122"] = "HIGH",     -- Request smuggling
            ["CVE-2021-25329"] = "HIGH",     -- Incomplete fix for CVE-2020-1938
            ["CVE-2021-30640"] = "MEDIUM",   -- JNDI realm authentication weakness
            ["CVE-2021-41079"] = "HIGH",     -- Apache Tomcat JNDI realm authentication
            ["CVE-2022-23181"] = "HIGH",     -- Local privilege escalation
            ["CVE-2022-29885"] = "HIGH",     -- Documentation web application XSS
            ["CVE-2023-28708"] = "HIGH",     -- Information disclosure
            ["CVE-2023-28709"] = "HIGH",     -- Remote code execution
            ["CVE-2023-41080"] = "HIGH"      -- Open redirect
        }
    }
}

-- Function to extract version from banner/metadata
local function extract_version_info()
    local version_info = {
        service_name = nil,
        version = nil,
        full_banner = nil
    }
    
    -- Try to get banner from metadata
    local banner = get_metadata("banner.data") or get_metadata("http.server") or ""
    if banner and banner ~= "" then
        version_info.full_banner = banner
        log("Found service banner: " .. banner)
    else
        log("No banner information available")
        return version_info
    end
    
    -- Try to identify service and extract version
    for service_name, service_data in pairs(vulnerable_services) do
        for _, pattern in ipairs(service_data.patterns) do
            if string.match(banner, pattern) then
                version_info.service_name = service_name
                
                -- Extract version using common patterns
                local version = string.match(banner, pattern .. "[/%s]+([%d%.]+)")
                if version then
                    version_info.version = version
                    log("Identified " .. service_name .. " version: " .. version)
                else
                    log("Identified " .. service_name .. " but could not extract version")
                end
                
                return version_info
            end
        end
    end
    
    log("Could not identify known vulnerable service from banner")
    return version_info
end

-- Function to check if version is in vulnerable range
local function is_version_in_range(version, range)
    if not version or not range then
        return false
    end
    
    -- Parse version range (e.g., "2.4.0-2.4.29")
    local range_start, range_end = string.match(range, "([%d%.]+)%-([%d%.]+)")
    if not range_start or not range_end then
        return version == range -- Exact match
    end
    
    -- Simple version comparison (assumes semantic versioning)
    local function version_to_number(v)
        local parts = {}
        for part in string.gmatch(v, "(%d+)") do
            table.insert(parts, tonumber(part))
        end
        -- Convert to comparable number (assumes max 3 digits per part)
        return (parts[1] or 0) * 1000000 + (parts[2] or 0) * 1000 + (parts[3] or 0)
    end
    
    local ver_num = version_to_number(version)
    local start_num = version_to_number(range_start)
    local end_num = version_to_number(range_end)
    
    return ver_num >= start_num and ver_num <= end_num
end

-- Function to get CVE severity score
local function get_cve_severity_score(cve_id, service_data)
    local severity = "UNKNOWN"
    
    if service_data.severity_mapping and service_data.severity_mapping[cve_id] then
        severity = service_data.severity_mapping[cve_id]
    end
    
    -- Convert severity to numerical score
    local severity_scores = {
        CRITICAL = 4,
        HIGH = 3,
        MEDIUM = 2,
        LOW = 1,
        UNKNOWN = 1
    }
    
    return severity_scores[severity] or 1, severity
end

-- Function to fetch additional CVE information (simplified)
local function get_cve_details(cve_id)
    -- In a production environment, you would query CVE databases like NVD
    -- For this demo, we'll return basic information
    local cve_info = {
        id = cve_id,
        description = "Known vulnerability - consult CVE database for details",
        cvss_score = nil,
        published_date = nil,
        references = {"https://cve.mitre.org/cgi-bin/cvename.cgi?name=" .. cve_id}
    }
    
    -- Add some known high-impact CVEs with details
    local known_cves = {
        -- Apache HTTP Server
        ["CVE-2021-41773"] = {
            description = "Apache HTTP Server path traversal vulnerability",
            cvss_score = 7.5,
            impact = "Directory traversal, potential RCE"
        },
        ["CVE-2021-42013"] = {
            description = "Apache HTTP Server path traversal and RCE",
            cvss_score = 9.8,
            impact = "Critical remote code execution vulnerability"
        },
        ["CVE-2021-44790"] = {
            description = "Apache HTTP Server mod_lua buffer overflow",
            cvss_score = 9.8,
            impact = "Remote code execution via buffer overflow"
        },
        ["CVE-2023-25690"] = {
            description = "Apache HTTP Server mod_proxy HTTP response smuggling",
            cvss_score = 9.8,
            impact = "HTTP response smuggling leading to cache poisoning"
        },
        
        -- nginx
        ["CVE-2017-7529"] = {
            description = "nginx integer overflow vulnerability", 
            cvss_score = 7.5,
            impact = "Potential remote code execution via integer overflow"
        },
        ["CVE-2021-23017"] = {
            description = "nginx DNS resolver off-by-one heap buffer overflow",
            cvss_score = 8.1,
            impact = "Remote code execution via malicious DNS response"
        },
        ["CVE-2023-44487"] = {
            description = "HTTP/2 Rapid Reset attack",
            cvss_score = 7.5,
            impact = "Denial of service via rapid stream resets"
        },
        
        -- OpenSSH
        ["CVE-2023-38408"] = {
            description = "OpenSSH pkcs11 provider loading vulnerability",
            cvss_score = 9.8,
            impact = "Remote code execution with root privileges"
        },
        ["CVE-2024-6387"] = {
            description = "OpenSSH signal handler race condition (regreSSHion)",
            cvss_score = 8.1,
            impact = "Remote unauthenticated code execution as root"
        },
        ["CVE-2021-41617"] = {
            description = "OpenSSH privilege escalation via supplemental groups",
            cvss_score = 7.0,
            impact = "Local privilege escalation"
        },
        
        -- FTP Servers
        ["CVE-2011-2523"] = {
            description = "vsftpd 2.3.4 backdoor vulnerability",
            cvss_score = 10.0,
            impact = "Backdoor allows remote code execution"
        },
        
        -- Database Systems
        ["CVE-2019-2614"] = {
            description = "MySQL Server replication privilege escalation",
            cvss_score = 8.0,
            impact = "High privilege user can compromise MySQL Server"
        },
        ["CVE-2018-1058"] = {
            description = "PostgreSQL search_path privilege escalation",
            cvss_score = 8.8,
            impact = "Privilege escalation via search_path manipulation"
        },
        ["CVE-2021-32625"] = {
            description = "Redis integer overflow in STRALGO command",
            cvss_score = 8.8,
            impact = "Remote code execution via integer overflow"
        },
        
        -- Web Servers
        ["CVE-2017-7269"] = {
            description = "Microsoft IIS 6.0 WebDAV buffer overflow",
            cvss_score = 10.0,
            impact = "Remote code execution with SYSTEM privileges"
        },
        ["CVE-2020-1938"] = {
            description = "Apache Tomcat AJP connector vulnerability (Ghostcat)",
            cvss_score = 9.8,
            impact = "Remote code execution and information disclosure"
        },
        
        -- Recent Critical CVEs
        ["CVE-2024-6387"] = {
            description = "OpenSSH regreSSHion vulnerability",
            cvss_score = 8.1,
            impact = "Unauthenticated remote code execution as root"
        },
        ["CVE-2024-0985"] = {
            description = "PostgreSQL non-owner REFRESH MATERIALIZED VIEW CONCURRENTLY",
            cvss_score = 8.0,
            impact = "Privilege escalation in PostgreSQL"
        }
    }
    
    if known_cves[cve_id] then
        for key, value in pairs(known_cves[cve_id]) do
            cve_info[key] = value
        end
    end
    
    return cve_info
end

-- Main CVE analysis function
local function analyze_cve_footprint()
    local analysis = {
        service_identified = false,
        service_name = nil,
        service_version = nil,
        banner_info = nil,
        vulnerabilities = {},
        total_cves = 0,
        critical_cves = 0,
        high_cves = 0,
        medium_cves = 0,
        low_cves = 0,
        risk_score = 0,
        max_risk_score = 0,
        compliance_issues = {}
    }
    
    -- Extract version information
    local version_info = extract_version_info()
    analysis.banner_info = version_info.full_banner
    
    if not version_info.service_name then
        log("Could not identify service type for CVE analysis")
        table.insert(analysis.compliance_issues, "Service identification failed - banner analysis required")
        return analysis
    end
    
    analysis.service_identified = true
    analysis.service_name = version_info.service_name
    analysis.service_version = version_info.version
    
    log("Analyzing CVEs for " .. version_info.service_name .. " " .. (version_info.version or "unknown version"))
    
    -- Get service vulnerability data
    local service_data = vulnerable_services[version_info.service_name]
    if not service_data then
        log("No CVE data available for service: " .. version_info.service_name)
        return analysis
    end
    
    -- Check for vulnerabilities if we have version info
    if version_info.version then
        for version_range, cve_list in pairs(service_data.common_cves) do
            if is_version_in_range(version_info.version, version_range) then
                log("Version " .. version_info.version .. " is in vulnerable range: " .. version_range)
                
                for _, cve_id in ipairs(cve_list) do
                    local score, severity = get_cve_severity_score(cve_id, service_data)
                    local cve_details = get_cve_details(cve_id)
                    
                    local vulnerability = {
                        cve_id = cve_id,
                        severity = severity,
                        score = score,
                        version_range = version_range,
                        description = cve_details.description,
                        cvss_score = cve_details.cvss_score,
                        impact = cve_details.impact,
                        references = cve_details.references
                    }
                    
                    table.insert(analysis.vulnerabilities, vulnerability)
                    analysis.total_cves = analysis.total_cves + 1
                    analysis.risk_score = analysis.risk_score + score
                    
                    -- Count by severity
                    if severity == "CRITICAL" then
                        analysis.critical_cves = analysis.critical_cves + 1
                    elseif severity == "HIGH" then
                        analysis.high_cves = analysis.high_cves + 1
                    elseif severity == "MEDIUM" then
                        analysis.medium_cves = analysis.medium_cves + 1
                    else
                        analysis.low_cves = analysis.low_cves + 1
                    end
                    
                    table.insert(analysis.compliance_issues, cve_id .. " (" .. severity .. "): " .. cve_details.description)
                    log("Found vulnerability: " .. cve_id .. " (" .. severity .. ")")
                end
                
                break -- Found matching range
            end
        end
    else
        log("No version information - cannot perform precise CVE matching")
        table.insert(analysis.compliance_issues, "Version information unavailable - comprehensive CVE analysis not possible")
        
        -- Still flag that this is a known vulnerable service type
        analysis.risk_score = 1 -- Minimal risk for unversioned service
        table.insert(analysis.compliance_issues, "Service type has known vulnerabilities but version cannot be determined")
    end
    
    -- Calculate maximum possible risk (for percentage calculation)
    analysis.max_risk_score = math.max(analysis.risk_score, 10) -- Normalize against reasonable maximum
    
    return analysis
end

-- Perform CVE analysis
log("Starting CVE vulnerability analysis")
local cve_results = analyze_cve_footprint()

-- Set comprehensive metadata
set_metadata("cve.service_identified", cve_results.service_identified)
set_metadata("cve.service_name", cve_results.service_name or "unknown")
set_metadata("cve.service_version", cve_results.service_version or "unknown")
set_metadata("cve.banner_info", cve_results.banner_info or "")

set_metadata("cve.total_vulnerabilities", cve_results.total_cves)
set_metadata("cve.critical_count", cve_results.critical_cves)
set_metadata("cve.high_count", cve_results.high_cves)
set_metadata("cve.medium_count", cve_results.medium_cves)
set_metadata("cve.low_count", cve_results.low_cves)

set_metadata("cve.risk_score", cve_results.risk_score)
set_metadata("cve.max_risk_score", cve_results.max_risk_score)

-- Calculate risk percentage (lower is better)
local risk_percentage = 0
if cve_results.max_risk_score > 0 then
    risk_percentage = math.floor((cve_results.risk_score / cve_results.max_risk_score) * 100)
end
set_metadata("cve.risk_percentage", risk_percentage)

-- Set individual vulnerability metadata
for i, vuln in ipairs(cve_results.vulnerabilities) do
    set_metadata("cve.vuln_" .. i .. ".id", vuln.cve_id)
    set_metadata("cve.vuln_" .. i .. ".severity", vuln.severity)
    set_metadata("cve.vuln_" .. i .. ".score", vuln.score)
    set_metadata("cve.vuln_" .. i .. ".description", vuln.description)
    if vuln.cvss_score then
        set_metadata("cve.vuln_" .. i .. ".cvss_score", vuln.cvss_score)
    end
end

-- Set compliance issues
if #cve_results.compliance_issues > 0 then
    set_metadata("cve.compliance_issues", table.concat(cve_results.compliance_issues, "; "))
end

log("CVE analysis found " .. cve_results.total_cves .. " vulnerabilities (Risk: " .. cve_results.risk_score .. "/" .. cve_results.max_risk_score .. ")")

-- Determine compliance status for Moldovan Cybersecurity Law Article 11
local compliance_level = "excellent"
local compliance_status = "pass"

if not cve_results.service_identified then
    compliance_level = "unknown"
    compliance_status = "conditional"
    log("Service identification failed - CVE assessment incomplete")
    
elseif cve_results.critical_cves > 0 then
    compliance_level = "critical_risk"
    compliance_status = "fail"
    log("Critical CVEs found - immediate action required")
    
elseif cve_results.high_cves > 2 then
    compliance_level = "high_risk"
    compliance_status = "fail"
    log("Multiple high-severity CVEs found")
    
elseif cve_results.high_cves > 0 then
    compliance_level = "moderate_risk"
    compliance_status = "conditional"
    log("High-severity CVEs found - patching recommended")
    
elseif cve_results.medium_cves > 3 then
    compliance_level = "moderate_risk"
    compliance_status = "conditional"
    log("Multiple medium-severity CVEs found")
    
elseif cve_results.total_cves > 0 then
    compliance_level = "low_risk"
    compliance_status = "conditional"
    log("Some vulnerabilities found - monitoring recommended")
    
else
    compliance_level = "excellent"
    compliance_status = "pass"
    log("No known CVEs found for this service version")
end

set_metadata("cve.compliance_level", compliance_level)
set_metadata("cve.compliance_status", compliance_status)

-- Update compliance checklists based on results
if compliance_status == "pass" then
    local pass_message = "No critical vulnerabilities detected"
    if cve_results.service_identified and cve_results.service_version then
        pass_message = pass_message .. " for " .. cve_results.service_name .. " " .. cve_results.service_version
    end
    
    pass_checklist("vulnerability-management-021", pass_message)
    pass_checklist("cve-monitoring-022", "CVE footprint acceptable")
    
    log("CVE compliance: PASS - " .. compliance_level)
    pass()
    
elseif compliance_status == "conditional" then
    local conditional_message = "Vulnerabilities detected requiring attention"
    if cve_results.total_cves > 0 then
        conditional_message = conditional_message .. " (" .. cve_results.total_cves .. " CVEs found)"
    end
    if #cve_results.compliance_issues > 0 then
        conditional_message = conditional_message .. ": " .. table.concat(cve_results.compliance_issues, "; ")
    end
    
    pass_checklist("vulnerability-management-021", conditional_message)
    fail_checklist("cve-monitoring-022", "CVE issues require remediation")
    
    log("CVE compliance: CONDITIONAL - " .. conditional_message)
    pass()
    
else
    local fail_message = "Critical vulnerabilities detected"
    if cve_results.critical_cves > 0 then
        fail_message = fail_message .. " (" .. cve_results.critical_cves .. " critical CVEs)"
    end
    if #cve_results.compliance_issues > 0 then
        fail_message = fail_message .. ": " .. table.concat(cve_results.compliance_issues, "; ")
    end
    
    fail_checklist("vulnerability-management-021", fail_message)
    fail_checklist("cve-monitoring-022", "Critical CVE exposure detected")
    
    log("CVE compliance: FAIL - " .. fail_message)
    reject("Critical vulnerabilities detected")
end

-- Add descriptive tags based on findings
if compliance_level == "excellent" then
    add_tag("no-known-cves")
elseif compliance_level == "low_risk" then
    add_tag("low-cve-risk")
elseif compliance_level == "moderate_risk" then
    add_tag("moderate-cve-risk")
elseif compliance_level == "high_risk" then
    add_tag("high-cve-risk")
elseif compliance_level == "critical_risk" then
    add_tag("critical-cve-risk")
else
    add_tag("unknown-cve-status")
end

-- Add service-specific tags
if cve_results.service_identified then
    add_tag("service-" .. cve_results.service_name)
    if cve_results.service_version then
        add_tag("versioned-service")
    else
        add_tag("unversioned-service")
    end
end

-- Add severity-specific tags
if cve_results.critical_cves > 0 then
    add_tag("has-critical-cves")
end
if cve_results.high_cves > 0 then
    add_tag("has-high-cves")
end
if cve_results.medium_cves > 0 then
    add_tag("has-medium-cves")
end

-- Add individual CVE tags
for _, vuln in ipairs(cve_results.vulnerabilities) do
    add_tag(string.lower(vuln.cve_id))
end

if cve_results.total_cves == 0 and cve_results.service_identified then
    add_tag("cve-clean")
end

log("CVE vulnerability analysis completed for: " .. host .. ":" .. port)